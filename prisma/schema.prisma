// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  predictions   Prediction[]
  comments      Comment[]
  votes         Vote[]
  accuracy      Float        @default(0)
  totalPredictions Int       @default(0)
  successfulPredictions Int  @default(0)
}

model Prediction {
  id          String    @id @default(cuid())
  coinId      String
  targetPrice Float
  timeframe   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  votes       Vote[]
  analysis    String?
  status      String   @default("PENDING") // PENDING, SUCCESSFUL, FAILED
  actualPrice Float?   // Price at the end of timeframe
  accuracy    Float?   // Calculated accuracy of prediction
}

model Comment {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  predictionId String
  prediction   Prediction @relation(fields: [predictionId], references: [id])
  votes        Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  type         VoteType
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  predictionId String?
  prediction   Prediction? @relation(fields: [predictionId], references: [id])
  commentId    String?
  comment      Comment?   @relation(fields: [commentId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([userId, predictionId])
  @@unique([userId, commentId])
}

enum VoteType {
  UP
  DOWN
}

// Cryptocurrency price history
model CoinPrice {
  id        String   @id @default(cuid())
  coin      String
  price     Float
  timestamp DateTime @default(now())

  @@index([coin, timestamp])
}